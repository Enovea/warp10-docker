name: Build WarpÂ 10 docker image

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_TITLE: 'Start build'
          SLACK_COLOR: warning
          SLACK_ICON: ''
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 0 # Fetch all branches and tags so we can find the latest tag

      - name: Get latest tag
        run: echo "::set-env name=TAG::$(git describe --abbrev=0 --tags)"

      - name: Is new tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "::set-env name=PUSH::--push"

      - name: Set up Docker Buildx for multiarch build
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Test the new image
        run: |
          docker buildx build \
            --load \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG}-test \
            --platform linux/amd64 .
          echo "Run docker image"
          docker run --name testing-${TAG} -d -p 8080:8080 -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG}-test

          echo "get write cmd"
          write_cmd=$(docker logs $(docker ps -q --filter "name=testing-${TAG}")  2>/dev/null | grep 'curl ' | sed -e 's/##   //g' | head -1)
          echo ${write_cmd}

          echo "get read cmd"
          read_cmd=$(docker logs $(docker ps -q --filter "name=testing-${TAG}")  2>/dev/null | grep 'curl ' | sed -e 's/##   //g' | head -2 | tail -1 | sed -e 's/=-1/=-10\&format=fulltext/g')
          echo ${read_cmd}

          for i in {0..5}
          do
            eval ${write_cmd}
          done
          res=$(eval ${read_cmd} 2>/dev/null | cut -d ' ' -f3 | tr -d '\n')
          echo ${res}
          if [[ "${res}" -ne "424242424242" ]]; then
            exit 1
          fi

      - name: Build the main image
        run: |
          docker buildx build \
            ${PUSH} \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:latest \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG} \
            --platform linux/amd64,linux/arm/v7,linux/arm64 .

      - name: Build the ci image
        run: |
          docker buildx build \
            ${PUSH} \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG}-ci \
            --platform linux/amd64,linux/arm/v7,linux/arm64 predictible-tokens-for-ci

      - name: Notify success
        if: success()
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_TITLE: 'Build successful'
          SLACK_COLOR: good
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_TITLE: 'Build failure'
          SLACK_COLOR: danger
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
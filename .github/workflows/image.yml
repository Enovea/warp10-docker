name: Build WarpÂ 10 docker image

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 0 # Fetch all branches and tags so we can find the latest tag

      - name: Get latest tag
        run: echo "::set-env name=TAG::$(git describe --abbrev=0 --tags)"

      - name: Is new tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "::set-env name=PUSH::--push"

      - name: Set up Docker Buildx for multiarch build
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Test the new image
        run: |
          docker buildx build \
            --load \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG}-test \
            --platform linux/amd64 .
          echo "Run docker image"
          docker run --name testing-${TAG} -d -p 8080:8080 -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG}-test
          sleep 10

          echo "Get tokens"
          READ_TOKEN=$(docker exec -i $(docker ps -q --filter "name=testing-${TAG}") tail -n 1 /opt/warp10/etc/initial.tokens | sed -e 's/{"read":{"token":"//' -e 's/".*//')
          WRITE_TOKEN=$(docker exec -i $(docker ps -q --filter "name=testing-${TAG}") tail -n 1 /opt/warp10/etc/initial.tokens | sed -e 's/.*,"write":{"token":"//' -e 's/".*//')

          echo "Write data"
          curl -s -H "X-Warp10-Token: ${WRITE_TOKEN}" http://0.0.0.0:8080/api/v0/update --data-binary '// test{} 42'

          echo "Read data"
          res=$(curl -s "http://0.0.0.0:8080/api/v0/fetch?token=${READ_TOKEN}&selector=~.*\{\}&now=now&timespan=-1" | cut -d ' ' -f3)
          echo ${res}
          if [[ "${res}" != "42" ]]; then
            echo "Failed to compare write data with read data"
            exit 1
          fi

          echo "Test WarpStudio"
          res=$(curl -Is http://0.0.0.0:8081/ | head -1)
          if [[ "${res}" != "HTTP/1.1 200 OK" ]]; then
            echo "Failed to test WarpStudio URL"
            exit 1
          fi

      - name: Build the main image
        run: |
          docker buildx build \
            ${PUSH} \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:latest \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG} \
            --platform linux/amd64,linux/arm/v7,linux/arm64 .

      - name: Build the ci image
        run: |
          docker buildx build \
            ${PUSH} \
            --tag ${{ secrets.DOCKER_USERNAME }}/warp10:${TAG}-ci \
            --platform linux/amd64,linux/arm/v7,linux/arm64 predictible-tokens-for-ci

      - name: Send Notification
        uses: bayssmekanique/action-simple-slack-notifier@v1
        if: always()
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          status: ${{ job.status }}
          channel: '#jenkins'
          version: ${{ steps.check.outputs.version }}